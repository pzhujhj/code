1、int open(const char * pathname, int flags, mode_t mode);
flag用于指定文件的打开/创建模式，这3个常量定义在fcntl.h中，这3个参数是必选的，而且只能选择一个：
O_RDONLY       只读模式
O_WRONLY      只写模式
O_RDWR           读写模式

下面的常量是可选的：
O_APPEND     每次写操作都写入文件的末尾。
O_CREAT      如果指定文件不存在，则创建这个文件。如果存在则直接打开文件。如果创建新文件，而mode参数没有指定，则创建的文件权限不定。
O_EXCL       如果文件不存在，则返回错误。如果同时指定了O_CREAT，而文件已经存在，则会出错。 用此测试一个文件是否存在，如果不存在，则创建此文件。
O_TRUNC      如果文件存在，并且以只写/读写方式打开，则清空文件全部内容。
O_NOCTTY     如果路径名指向终端设备，不要把这个设备用作控制终端。
O_NONBLOCK   如果路径名指向 FIFO/块文件/字符文件，则把文件的打开和后继 I/O设置为非阻塞模式（nonblocking mode）。
下面三个标志也是可选的，他们是Single UNIX Specification中同步输入和输出选项的一部分：
O_DSYNC      等待物理 I/O 结束后再 write。在不影响读取新写入的数据的前提下，不等待文件属性更新。 
O_RSYNC      read 等待所有写入同一区域的写操作完成后再进行。
O_SYNC       等待物理 I/O 结束后再 write，包括更新文件属性的 I/O。
可选参数可以和必选参数一起使用，并且可以使用多个，如果要以读写方式打开一个文件，如果该文件已经存在，则文件清空，如果没有存在，则新创建文件，flag应该为：O_WRONLY | O_CREAT | O_TRUNC

参数mode 则有下列数种组合, 只有在建立新文件时才会生效, 此外真正建文件时的权限会受到umask 值所影响, 因此该文件权限应该为 (mode-umaks).
S_IRWXU00700 权限, 代表该文件所有者具有可读、可写及可执行的权限.
S_IRUSR 或S_IREAD, 00400 权限, 代表该文件所有者具有可读取的权限.
S_IWUSR 或S_IWRITE, 00200 权限, 代表该文件所有者具有可写入的权限.
S_IXUSR 或S_IEXEC, 00100 权限, 代表该文件所有者具有可执行的权限.
S_IRWXG 00070 权限, 代表该文件用户组具有可读、可写及可执行的权限.
S_IRGRP 00040 权限, 代表该文件用户组具有可读的权限.
S_IWGRP 00020 权限, 代表该文件用户组具有可写入的权限.
S_IXGRP 00010 权限, 代表该文件用户组具有可执行的权限.
S_IRWXO 00007 权限, 代表其他用户具有可读、可写及可执行的权限.
S_IROTH 00004 权限, 代表其他用户具有可读的权限
S_IWOTH 00002 权限, 代表其他用户具有可写入的权限.
S_IXOTH 00001 权限, 代表其他用户具有可执行的权限.

对于权限问题，默认可以不加上，如果要加上也可以直接写数字，例如：fd = open("test.txt", O_CREAT | O_TRUNC | O_RDWR, 0666);

2、定义函数：off_t lseek(int fildes, off_t offset, int whence);
函数说明：
每一个已打开的文件都有一个读写位置, 当打开文件时通常其读写位置是指向文件开头, 若是以附加的方式打开文件(如O_APPEND), 
则读写位置会指向文件尾. 当read()或write()时, 读写位置会随之增加,lseek()便是用来控制该文件的读写位置. 参数fildes 为已打开的文件描述词, 
参数offset 为根据参数whence来移动读写位置的位移数.

参数 whence 为下列其中一种:
    SEEK_SET 参数offset 即为新的读写位置.
    SEEK_CUR 以目前的读写位置往后增加offset 个位移量.
    SEEK_END 将读写位置指向文件尾后再增加offset 个位移量. 当whence 值为SEEK_CUR 或
    SEEK_END 时, 参数offet 允许负值的出现.

下列是特别的使用方式:
1) 欲将读写位置移到文件开头时:lseek(int fildes, 0, SEEK_SET);
2) 欲将读写位置移到文件尾时:lseek(int fildes, 0, SEEK_END);
3) 想要取得目前文件位置时:lseek(int fildes, 0, SEEK_CUR);

返回值：当调用成功时则返回目前的读写位置, 也就是距离文件开头多少个字节. 若有错误则返回-1, errno 会存放错误代码.

off_t类型用于指示文件的偏移量，常就是long类型，其默认为一个32位的整数，在gcc编译中会被编译为long int类型，
在64位的Linux系统中则会被编译为long long int，这是一个64位的整数，其定义在unistd.h头文件中可以查看

使用：off_t offset = lseek(fd, 0, SEEK_CUR);

3、ssize_t pread(int fd, void *buf, size_t nbytes, off_t offset) 返回值：读到的字节数，若到文件尾，返回0，如出错返回-1
ssize_t pwrite(int fd, void *buf, size_t nbytes, off_t offset) 返回值：写入的字节数，如出错返回-1
pread 相当于调用lseek后在调用read，pwrite同理
